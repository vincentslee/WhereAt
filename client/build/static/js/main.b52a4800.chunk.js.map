{"version":3,"sources":["logo.svg","components/NewEventForm.js","components/ShowItems.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewEventForm","props","_useState","useState","event","location","successMessage","_useState2","Object","slicedToArray","state","setState","handleChange","e","_e$target","target","id","value","prevState","objectSpread","defineProperty","react_default","a","createElement","type","placeholder","onChange","onClick","preventDefault","payload","axios","post","then","response","console","log","status","showError","catch","err","ShowItems","promises","newitems","push","get","data","useEffect","Promise","all","App","className","components_NewEventForm","components_ShowItems","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b52a4800.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React, {useState} from 'react'\nimport axios from 'axios'\n\nfunction NewEventForm(props) {\n\n    const [state, setState] = useState({\n        event : \"\",\n        location : \"\",\n        successMessage: null\n    })\n\n    const handleChange = (e) => {\n        const {id, value} = e.target\n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        const payload={\n            \"event\":state.event,\n            \"location\":state.location\n        }\n\n        axios.post('/data/add', payload)\n        .then((response)=>{\n            console.log(payload)\n            console.log(\"Attemping to add...\")\n            console.log(response)\n            if (response.status === 200){\n                console.log('Added')\n            }else{\n                props.showError('Something failed!')\n            }\n\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n        \n    }\n    return (\n        <div>\n            <form>\n                <label>What happened?</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"I...\"\n                    value={state.event}\n                    onChange={handleChange}\n\n                    id=\"event\"\n                >\n                </input>\n\n                <label>Where at?</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Location\"\n                    value={state.location}\n                    onChange={handleChange}\n\n                    id=\"location\"\n                >\n                </input>\n\n                <button\n                type=\"submit\"\n                onClick={handleSubmitClick}\n                >Submit</button>\n\n            </form>\n            \n        </div>\n    )\n}\n\nexport default NewEventForm\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios';\n\nfunction ShowItems() {\n\n    const [items, setItems] = useState([]);\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            \"Access-Control-Allow-Origin\": \"*\"\n        }\n    };\n\n    // We uses promises to store a list of functions that will execute only once upon page load\n    let promises = [];\n    var newitems = [];\n    promises.push(\n    axios.get('/data/get').then((response)=>{\n        console.log('get req')\n        console.log(response.data)\n        newitems.push(response.data);\n    }));\n\n    useEffect(()=>{\n        Promise.all(promises).then(() => {\n            //setItems(newitems);\n            console.log(newitems)\n        });\n    }, []);\n\n\n\n    return (\n        <div>\n            <div></div>\n        </div>\n    )\n}\n\nexport default ShowItems\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport NewEventForm from \"./components/NewEventForm\";\nimport ShowItems from \"./components/ShowItems\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NewEventForm/>\n        <ShowItems/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}